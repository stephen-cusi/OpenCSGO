#! /usr/bin/env python

def options(opt):
	return

def configure(conf):
	conf.define('NO_STEAM', True)
	conf.define('USE_CONVARS', True)
	conf.define('VOICE_OVER_IP', True)
	conf.define('ENGINE_DLL', True)
	conf.define('USE_BREAKPAD_HANDLER', True)
	if conf.env.DEDICATED:
		conf.define('SWDS', True)

def build(bld):
	libs = ['tier0', 'appframework', 'bitmap', 'vgui_controls', 'matsys_controls', 'dmxloader', 'soundsystem_lowlevel', 'tier1', 'tier2', 'tier3', 'interfaces', 'vstdlib', 'mathlib', 'vtf', 'videocfg', 'generated_proto', 'quickhull', 'protobuf', 'jpeg', 'bzip2', 'mojoAL', 'SDL2']

	includes = [
		'.',
		'audio',
		'audio/private',
		'audio/private/snd_op_sys',
		'audio/public',
		'../generated_proto',
		'../thirdparty/quickhull',
		'../thirdparty/protobuf-2.6.1/src'
	]

	source = [
		'clientframe.cpp',
		'decal_clip.cpp',
		'demofile.cpp',
		'demostreamhttp.cpp',
		'demostream.cpp',
		'demobuffer.cpp',
		'DevShotGenerator.cpp',
		'OcclusionSystem.cpp',
		'tmessage.cpp',
		'baseclientstate.cpp',
		'console.cpp',
		'render_pch.cpp',
		'decals.cpp',
		'disp.cpp',
		'disp_interface.cpp',
		'disp_mapload.cpp',
		'gl_draw.cpp',
		'gl_rsurf.cpp',
		'gl_shader.cpp',
		'l_studio.cpp',
		'matsys_interface.cpp',
		'modelloader.cpp',
		'r_decal.cpp',
		'server_pch.cpp',
		'sv_ipratelimit.cpp',
		'sv_rcon.cpp',
		'sv_steamauth.cpp',
		'sv_uploaddata.cpp',
		'sv_uploadgamestats.cpp',
		'baseclient.cpp',
		'sv_main.cpp',
		'sv_client.cpp',
		'sv_ents_write.cpp',
		'sv_filter.cpp',
		'sv_framesnapshot.cpp',
		'sv_log.cpp',
		'sv_master.cpp',
		'sv_packedentities.cpp',
		'sv_plugin.cpp',
		'sv_precache.cpp',
		'sv_redirect.cpp',
		'sv_remoteaccess.cpp',
		'vengineserver_impl.cpp',
		'baseautocompletefilelist.cpp',
		'baseserver.cpp',
		'bitbuf_errorhandler.cpp',
		'blackbox.cpp',		
		'../public/blockingudpsocket.cpp',
		'../public/bsptreedata.cpp',
		'../public/builddisp.cpp',
		'buildnum.cpp',
		'changeframelist.cpp',
		'checksum_engine.cpp',
		'clockdriftmgr.cpp',
		'cmd.cpp',
		'cmodel.cpp',
		'cmodel_bsp.cpp',
		'cmodel_disp.cpp',
		'../public/collisionutils.cpp',
		'common.cpp',
		'../public/crtmemdebug.cpp',
		'cvar.cpp',
		'../public/disp_common.cpp',
		'disp_defs.cpp',
		'disp_helpers.cpp',
		'../public/disp_powerinfo.cpp',
		'../public/dispcoll_common.cpp',
		'DownloadListGenerator.cpp',
		'downloadthread.cpp',
		'dt.cpp',
		'dt_common_eng.cpp',
		'dt_encode.cpp',
		'dt_instrumentation.cpp',
		'dt_instrumentation_server.cpp',
		'dt_localtransfer.cpp',
		'../public/dt_recv.cpp',
		'dt_recv_decoder.cpp',
		'dt_recv_eng.cpp',
		'../public/dt_send.cpp',
		'dt_send_eng.cpp',
		'dt_stack.cpp',
		'dt_test.cpp',
		'../public/dt_utlvector_common.cpp',
		'../public/dt_utlvector_recv.cpp',
		'../public/dt_utlvector_send.cpp',
		'enginesingleuserfilter.cpp',
		'enginestats.cpp',
		'enginethreads.cpp',
		'enginetrace.cpp',
		'filesystem_engine.cpp',
		'../public/filesystem_helpers.cpp',
		'../public/filesystem_init.cpp',
		'filetransfermgr.cpp',
		'GameEventManager.cpp',
		'GameEventManagerOld.cpp',
		'gameeventtransmitter.cpp',
		'gametrace_engine.cpp',
		'hltvclient.cpp',
		'hltvclientstate.cpp',
		'hltvdemo.cpp',
		'hltvbroadcast.cpp',
		'hltvserver.cpp',
		'hltvtest.cpp',
		'host.cpp',
		'host_cmd.cpp',
		'host_listmaps.cpp',
		'host_phonehome.cpp',
		'host_state.cpp',
		'imagepacker.cpp',
		'initmathlib.cpp',
		'../common/language.cpp',
		'LocalNetworkBackdoor.cpp',
		'../public/lumpfiles.cpp',
		'MapReslistGenerator.cpp',
		'materialproxyfactory.cpp',
		'mem_fgets.cpp',
		'mod_vis.cpp',
		'ModelInfo.cpp',
		'netconsole.cpp',
		'net_chan.cpp',
		'net_support.cpp',
		'net_synctags.cpp',
		'net_ws.cpp',
		'net_ws_queued_packet_sender.cpp',
		'net_steamsocketmgr.cpp',
		'../common/netmessages.cpp',
		'../common/steamid.cpp',
		'networkstringtable.cpp',
		'NetworkStringTableItem.cpp',
		'networkstringtableserver.cpp',
		'../public/networkvar.cpp',
		'packed_entity.cpp',
		'pure_server.cpp',
		'pr_edict.cpp',
		'precache.cpp',
		'quakedef.cpp',
		'randomstream.cpp',
		'../common/randoverride.cpp',
		'../public/registry.cpp',
		'replay.cpp',
		'replayclient.cpp',
		'replayhistorymanager.cpp',
		'replaydemo.cpp',
		'replayserver.cpp',
		'../public/sentence.cpp',
		'singleplayersharedmemory.cpp',
		'sound_shared.cpp',
		'spatialpartition.cpp',
		'staticpropmgr.cpp',
		'status.cpp',
		'../public/studio.cpp',
		'sys_dll.cpp',
		'sys_dll2.cpp',
		'sys_engine.cpp',
		'testscriptmgr.cpp',
		'traceinit.cpp',
		'../public/vallocator.cpp',
		'voiceserver_impl.cpp',
		'vprof_engine.cpp',
		'vprof_record.cpp',
		'world.cpp',
		'../public/XZip.cpp', 
		'../public/XUnzip.cpp',
		'zone.cpp',
		'cheatcodes.cpp',
		'download.cpp',
		'../public/editor_sendcommand.cpp',
		'keys.cpp',
		'networkstringtableclient.cpp',
		'../public/scratchpad3d.cpp',
		'servermsghandler.cpp',
		'xboxsystem.cpp',
		'../common/SourceAppInfo.cpp',
		'../engine/paint.cpp',
		'../public/phonemeconverter.cpp',
		'snd_io.cpp',
		'EngineSoundServer.cpp',
		'audio/private/voice_wavefile.cpp',
		'audio/audio_pch.cpp',
		'audio/private/vox.cpp',
		'audio/private/snd_stubs.cpp',
		'serializedentity.cpp',
		'bsplog.cpp',
		'../public/tier0/memoverride.cpp'
	]

	if bld.env.DEDICATED:
		source += ['cl_null.cpp']
	else:
		source += [
			'client_pch.cpp',
			'cl_rcon.cpp',
			'rpt_engine.cpp',
			'cl_steamauth.cpp',
			'r_efx.cpp',
			'view.cpp',
			'cbenchmark.cpp',
			'cdll_engine_int.cpp',
			'cl_main.cpp',
			'cl_demo.cpp',
			'cl_broadcast.cpp',
			'cl_demoaction.cpp',
			'cl_demoaction_types.cpp',
			'cl_demoactioneditors.cpp',
			'cl_demoactionmanager.cpp',
			'cl_demoeditorpanel.cpp',
			'cl_demosmootherpanel.cpp',
			'cl_demouipanel.cpp',
			'cl_foguipanel.cpp',
			'cl_txviewpanel.cpp',
			'cl_entityreport.cpp',
			'cl_ents_parse.cpp',
			'cl_localnetworkbackdoor.cpp',
			'cl_parse_event.cpp',
			'cl_pluginhelpers.cpp',
			'cl_pred.cpp',
			'cl_splitscreen.cpp',
			'cl_texturelistpanel.cpp',
			'client.cpp',
			'colorcorrectionpanel.cpp',
			'buildcubemaps.cpp',
			'buildmodelforworld.cpp',
			'debug_leafvis.cpp',
			'debugoverlay.cpp',
			'brushbatchrender.cpp',
			'gl_drawlights.cpp',
			'gl_lightmap.cpp',
			'gl_matsysiface.cpp',
			'gl_rlight.cpp',
			'gl_rmain.cpp',
			'gl_rmisc.cpp',
			'gl_screen.cpp',
			'gl_warp.cpp',
			'Overlay.cpp',
			'r_areaportal.cpp',
			'r_linefile.cpp',
			'shadowmgr.cpp',
			'sys_getmodes.cpp',
			'vgui_askconnectpanel.cpp',
			'vgui_watermark.cpp',
			'cl_bounded_cvars.cpp',
			'LoadScreenUpdate.cpp',
			'sys_mainwind.cpp',
			'bugreporter.cpp',
			'host_saverestore.cpp',
			'lightcache.cpp',
			'saverestore_filesystem_passthrough.cpp',
			'saverestore_filesystem.cpp',
			'EngineSoundClient.cpp',
			'engsoundservice.cpp',
			'audio/private/MPAFile.cpp',
			'audio/private/MPAHeader.cpp',
			'audio/private/snd_dev_common.cpp',
			'audio/private/snd_dma.cpp',
			'audio/private/snd_mixgroups.cpp',
			'audio/private/snd_dsp.cpp',
			'audio/private/snd_mix.cpp',
			'audio/private/snd_op_sys/sos_system.cpp',
			'audio/private/snd_op_sys/sos_entry_match_system.cpp',
			'audio/private/snd_op_sys/sos_op.cpp',
			'audio/private/snd_op_sys/sos_op_block_entry.cpp',
			'audio/private/snd_op_sys/sos_op_convar.cpp',
			'audio/private/snd_op_sys/sos_op_dashboard.cpp',
			'audio/private/snd_op_sys/sos_op_delta.cpp',
			'audio/private/snd_op_sys/sos_op_distant_dsp.cpp',
			'audio/private/snd_op_sys/sos_op_entry_time.cpp',
			'audio/private/snd_op_sys/sos_op_entity_info.cpp',
			'audio/private/snd_op_sys/sos_op_falloff.cpp',
			'audio/private/snd_op_sys/sos_op_filters.cpp',
			'audio/private/snd_op_sys/sos_op_iterate_merge_speakers.cpp',
			'audio/private/snd_op_sys/sos_op_map_name.cpp',
			'audio/private/snd_op_sys/sos_op_math.cpp',
			'audio/private/snd_op_sys/sos_op_mixer.cpp',
			'audio/private/snd_op_sys/sos_op_mixlayer.cpp',
			'audio/private/snd_op_sys/sos_op_occlusion.cpp',
			'audio/private/snd_op_sys/sos_op_opvar.cpp',
			'audio/private/snd_op_sys/sos_op_output.cpp',
			'audio/private/snd_op_sys/sos_op_platform.cpp',
			'audio/private/snd_op_sys/sos_op_player_info.cpp',
			'audio/private/snd_op_sys/sos_op_pos_vec8.cpp',
			'audio/private/snd_op_sys/sos_op_source_info.cpp',
			'audio/private/snd_op_sys/sos_op_spatialize.cpp',
			'audio/private/snd_op_sys/sos_op_start_entry.cpp',
			'audio/private/snd_op_sys/sos_op_stop_entry.cpp',
			'audio/private/snd_op_sys/sos_op_sys_time.cpp',
			'audio/private/snd_op_sys/sos_op_tracks.cpp',
			'audio/private/snd_op_sys/sos_op_util.cpp',
			'audio/private/snd_sentence_mixer.cpp',
			'audio/private/snd_wave_data.cpp',
			'audio/private/snd_wave_mixer.cpp',
			'audio/private/snd_wave_mixer_adpcm.cpp',
			'audio/private/snd_wave_source.cpp',
			'audio/private/snd_wave_temp.cpp',
			'audio/private/snd_win.cpp',
			'audio/private/voice_gain.cpp',
			'audio/private/VBRHeader.cpp',
			'audio/private/voice.cpp',
			'audio/private/voice_sound_engine_interface.cpp',
			'../public/vgui_controls/vgui_controls.cpp',
			'../common/vgui/vgui_basebudgetpanel.cpp',
			'../common/vgui/vgui_budgetbargraphpanel.cpp',
			'../common/vgui/vgui_budgethistorypanel.cpp',
			'../common/vgui/vgui_budgetpanelshared.cpp',
			'perfuipanel.cpp',
			'vgui_basepanel.cpp',
			'vgui_baseui_interface.cpp',
			'vgui_budgetpanel.cpp',
			'vgui_DebugSystemPanel.cpp',
			'vgui_drawtreepanel.cpp',
			'vgui_helpers.cpp',
			'vgui_texturebudgetpanel.cpp',
			'vgui_vprofgraphpanel.cpp',
			'vgui_vprofpanel.cpp',
			'enginetool.cpp',
			'toolframework.cpp'
		]

	if bld.env.DEST_OS == 'win32':
		source += [
			'ipc_console.cpp',
			'audio/private/windows_audio.cpp',
			'audio/private/snd_dev_direct.cpp',
			'audio/private/voice_mixer_controls.cpp',
			'audio/private/voice_record_dsound.cpp'
		]
	else:
		source += [
			'sys_linuxwind.cpp',
			'audio/private/snd_posix.cpp'
		]

	if not bld.env.DEDICATED or build.env.DEST_OS == 'win32':
		source += [
			'audio/private/snd_mp3_source.cpp',
			'audio/private/snd_wave_mixer_mp3.cpp'
		]
		if bld.env.DEST_OS != 'win32':
			source += [
				'audio/private/voice_mixer_controls_sdl.cpp',
				'audio/private/voice_record_sdl.cpp'
			]

	bld.shlib(
		source   = source,
		target   = 'engine',
		features = 'cxx',
		includes = includes,
		use      = libs,
		install_path = bld.env.BINPATH,
		subsystem = bld.env.MSVC_SUBSYSTEM,
		idx = bld.get_taskgen_count()
	)
