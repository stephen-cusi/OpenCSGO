#! /usr/bin/env python

def options(opt):
	return

def configure(conf):
	conf.define('DXVK_NATIVE', True)
	conf.define('DXVK_WSI_SDL2', True)
	conf.define('DXVK_PLATFORM_LINUX', True)

def build(bld):
	if bld.env.DEST_OS == 'win32':
		return

	libs = ['dxso', 'dxvk_vulkan', 'dxvk', 'dxvk_util', 'wsi', 'spirv', 'SDL2']

	includes = [
		'.',
		'../../include'
	]

	source = [
		'd3d9_main.cpp',
		'd3d9_interface.cpp',
		'd3d9_adapter.cpp',
		'd3d9_monitor.cpp',
		'd3d9_device.cpp',
		'd3d9_state.cpp',
		'd3d9_cursor.cpp',
		'd3d9_swapchain.cpp',
		'd3d9_format.cpp',
		'd3d9_common_texture.cpp',
		'd3d9_texture.cpp',
		'd3d9_surface.cpp',
		'd3d9_volume.cpp',
		'd3d9_common_buffer.cpp',
		'd3d9_buffer.cpp',
		'd3d9_shader.cpp',
		'd3d9_vertex_declaration.cpp',
		'd3d9_query.cpp',
		'd3d9_multithread.cpp',
		'd3d9_options.cpp',
		'd3d9_stateblock.cpp',
		'd3d9_sampler.cpp',
		'd3d9_util.cpp',
		'd3d9_initializer.cpp',
		'd3d9_fixed_function.cpp',
		'd3d9_names.cpp',
		'd3d9_swvp_emu.cpp',
		'd3d9_format_helpers.cpp',
		'd3d9_hud.cpp'
	]

	bld.shlib(
		source   = source,
		target   = 'd3d9',
		features = 'cxx',
		includes = includes,
		use      = libs,
		install_path = bld.env.BINPATH,
		subsystem = bld.env.MSVC_SUBSYSTEM,
		idx = bld.get_taskgen_count()
	)
